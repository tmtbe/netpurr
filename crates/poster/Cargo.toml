[package]
name = "poster"
version = "1.0.0"
description = "This is a rest api request tools"
authors = ["Emil <jincheng.zhang@thoughtworks.com>"]
edition.workspace = true
rust-version.workspace = true
default-run = "poster"

[package.metadata.bundle]
name = "Poster"
identifier = "com.thoughtworks.poster"


[package.metadata.docs.rs]
all-features = true

[features]
default = ["glow", "persistence", "http", "image_viewer"]
# image_viewer adds about 0.9 MB of WASM
web_app = ["http", "persistence"]
http = ["ehttp", "image", "poll-promise", "egui_extras/image"]
image_viewer = ["image", "egui_extras/all_loaders", "rfd"]
persistence = ["eframe/persistence", "egui/persistence", "serde"]
puffin = ["eframe/puffin", "dep:puffin", "dep:puffin_http"]
glow = ["eframe/glow"]
wgpu = ["eframe/wgpu", "bytemuck"]
serde = ["dep:serde", "egui/serde"]

[dependencies]
egui = { version = "0.24.1",features = [
    "callstack",
    "extra_debug_asserts",
    "log",
]}
egui_extras = { version = "0.24.1",features = ["image"] }
egui_plot = {version = "0.24.1"}
eframe = { version = "0.24.1", default-features = false, features = [
    "accesskit",     # Make egui comptaible with screen readers. NOTE: adds a lot of dependencies.
    "default_fonts", # Embed the default egui fonts.
    "glow",          # Use the glow rendering backend. Alternative: "wgpu".
    "persistence",   # Enable restoring app state when restarting the app.
] }
log = { version = "0.4", features = ["std"] }

# Optional dependencies:
bytemuck = { version = "1.7.1", optional = true }
puffin = { version = "0.18", optional = true }
puffin_http = { version = "0.15", optional = true }

# feature "http":
ehttp = { version = "0.3.0", path = "../ehttp", optional = true, features = ["multipart"] }
image = { version = "0.24.7", optional = true, default-features = false, features = [
    "jpeg",
    "png",
] }
poll-promise = { version = "0.3", optional = true, default-features = false }

# feature "persistence":
serde = { version = "1", optional = true, features = ["derive"] }
serde_json = "1.0"

strum = "0.25.0"
strum_macros = "0.25.3"
uuid = { version = "1.6.1" ,features = ["v4"]}
chrono = { version = "0.4", features = ["serde"] }
urlencoding = "2.1.3"
dirs = "5.0.1"
rfd = "0.11"
regex = "1.10.2"
base64 = "0.21.5"

# native:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
env_logger = "0.10"
rfd = { version = "0.11", optional = true }

# web:
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = "=0.2.89"
wasm-bindgen-futures = "0.4"
web-sys = "0.3"

[profile.release]
opt-level = 2 # fast and small wasm

# Optimize all dependencies even in debug builds:
[profile.dev.package."*"]
opt-level = 2


[patch.crates-io]

# If you want to use the bleeding edge version of egui and eframe:
# egui = { git = "https://github.com/emilk/egui", branch = "master" }
# eframe = { git = "https://github.com/emilk/egui", branch = "master" }

# If you fork https://github.com/emilk/egui you can test with:
# egui = { path = "../egui/crates/egui" }
# eframe = { path = "../egui/crates/eframe" }
